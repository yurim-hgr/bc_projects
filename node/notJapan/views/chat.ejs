<!DOCTYPE html>
<html>
<head>
  <%- include mod/head.ejs %>
</head>
<body class="hold-transition skin-blue sidebar-mini">
  <div class="wrapper">
    <%- include mod/main_header.ejs %>    
    <%- include mod/main_sidebar.ejs %>    
    <%- include pages/chat_sub.ejs %>  
    <%- include mod/copyright.ejs %>
    <!-- 우측사이드바-->
    <%- include mod/config.ejs %>
    <div class="control-sidebar-bg"></div>
  </div>
  <!-- ./wrapper -->
  <%- include mod/foot.ejs %>
  <script src='/socket.io/socket.io.js'></script>
  <script>
    // 채팅 클라이언트 코드
    // 1. 채팅 서버에 접속 : (웹소켓)ws://~, 
    const socket = io.connect('http://localhost:3000')
    
    // 2. 소켓에 이벤트를 등록하여 접속 됬음을 알게 되면 사용자의 이름을 받는다
    // (세션이 있었다면:이름, 아이디 사용)
    let user_name
    socket.on( 'connect', ()=>{
      user_name = prompt('익명 닉네임 입력')
      console.log( '입력한 닉네임', user_name )
      // 서버로 닉네임을 전송 -> 서버에 있는 이벤트를 발생 시킨다
      socket.emit( 's_send_userName', user_name, new Date() )
    } )
    
    // 서버가 메시지를 보내면 채팅창에 표시
    socket.on( 'c_send_msg', (sender, msg, time)=>{
      console.log( sender, msg, time )
      // 메시지를 화면에 표시
      addMsg( sender, msg, time )
    } )
    
    // 클라이언트가 메시지를 작성하고, 엔터 or send키 클릭을 통해서 메시지를 서버로 전송
    // 엔터 이벤트 => keypress 이벤트
    // 이 문서상에 존재하는 모든 input 요소들 중에, name 속성의 값이 message인 요소
    $('input[name=message]').on('keypress', ( evt )=>{
      if( evt.keyCode == 13 ){
        console.log( '메시지 전송' )
        sendMsg()
      }      
    })
    
    // 이 문서상에 존재하는 모든 요소들 중에 id 값이 sendBtn인 요소
    $('#sendBtn').on('click', ( evt )=>{
      console.log( '메시지 전송' )
      sendMsg()      
    })
    
    // 메시지 전송
    function sendMsg(){
      socket.emit('s_send_msg', $('input[name=message]').val(), new Date() )
      // 입력창 초기화
      $('input[name=message]').val('')
    }
    
    // 메시지를 화면에 추가 처리
    function addMsg( sender, msg, time )
    {
      let flag = sender === user_name ? 'right' : 'left'
      let profile = sender === user_name ? 'avatar2.png' : 'avatar.png'
      // 1. 메시지UI를 붙일 요소를 찾아서, 동적으로 html을 구성하여 추가한다
      let html = `<div class="direct-chat-msg ${flag}">
                    <div class="direct-chat-info clearfix">
                      <span class="direct-chat-name pull-${flag}">${sender}</span>
                      <span class="direct-chat-timestamp pull-right">${time}</span>
                    </div>
                    <img class="direct-chat-img" src="/dist/img/${profile}" alt="message user image">
                    <div class="direct-chat-text">
                      ${msg}
                    </div>
                  </div>`
      $('.direct-chat-messages').append( html )
      // 자동스크롤
      $('.direct-chat-messages').scrollTop($('.direct-chat-messages')[0].scrollHeight+20)
    }

    // 방정보 표시
    socket.on('c_send_roomInfo', (rooms, myRoom)=>{
      console.log( rooms, myRoom )
      $('#chat_header').empty()
      $.each( rooms, (idx, item)=>{
        // 방정보를 붙이는 대상을 찾아서 html을 구성하여 붙인다
        let html = `
        <span data-toggle="tooltip" title="" class="badge bg-${ item === myRoom ? 'red' : 'yellow' }">${item}</span>
        `
        $('#chat_header').append( html )
        
        if(item != myRoom){
          $('#chat_header>span:last').on('click', ()=>{
            if( confirm(`${item}방으로 변경하시겠습니까?`) ) {
              console.log('방 변경시도')
              socket.emit('s_send_roomChg', item)
              // 기존 메시지는 삭제
              $('.direct-chat-messages').empty()
            }

          })
        }

      } )
    })

  </script>
</body>
</html>