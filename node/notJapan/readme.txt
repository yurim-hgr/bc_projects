1. 구조
    notJapan
    - bin           :
        - www       : 엔트리 포인트 : 코드의 시작점, 서버가동, 포트지정, 실시간통신소켓설정
    - node_modules  : 해당 프로젝트를 구동할대 사용하는 패키지(모듈) 모아둔곳
                      만약 없다면 => $ npm install
    - public        : 정적데이터 위치, 이미지, 클라이언트사이드js, css, 별도의 주소를 
                      지정하지 않아도 웹에서 접근이 가능하다
    - routes        : 라우트 : 요청이 들어오면 누가 처리할것인지 연결한다(라우팅)
        - index.js  : 서버사이드 js
        - users.js  :
    - views         : html이 위치한 곳, 단 템플릿 엔진에 따라 파일명이 변경이 되는데
                      express -e notJapan : -e 옵션인템플릿 엔진을 ejs를 사용하겠다는 뜻
        - index.js    *.ejs 저장
    - app.js        : 이 파일이 진정한 시작점, 실진적인 서버 내부 구성
    - package.json  : nodw 프로젝트의 메타 정보, 구동법, 사용패키지등, 
                      "npm 스크립트명령(start)"
2. 개발상 문제
    - 소스를 수정하고 새로운 내용이 반영될려면, 서버를 내리고 다시 올려야 한다.
        => 번잡하고, 시간이 미세하게 소모됨
    - 소스를 수정을 하면 자동으로 재가동되면 좋겠다
        => nodemon
        => $ npm i -g nodemon
        $ nodemon .bin/www
        -편의상 명령어를 통일하기 위해서 package.json 수정
-===============================================================================================================
"script":{
    "start" : "nodemon ./bin/www"
},
=============================================================================
-항후는 계속해서 아래 명령으로 가동
$ npm start
